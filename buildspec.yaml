version: 0.2
phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 633025986259.dkr.ecr.us-east-1.amazonaws.com
     # - echo Logging in to Amazon ECR ..
      - REPOSITORY_URI=633025986259.dkr.ecr.us-east-1.amazonaws.com/spring-boot-application 
      - IMAGE_TAG=latest #build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')

  build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - ls
      - echo "Building Maven project..."
      #- cd test-sm
      - mvn clean install 
      - echo "building docker image...."
     # - cd ..
      - pwd
      - docker build -f Dockerfile-spring-boot -t springboot .
      - sudo docker tag springboot:latest public.ecr.aws/p2g3u3g4/spring-boot-application:latest 
   

  post_build:
    commands:
      #- sudo docker push public.ecr.aws/p2g3u3g4/thm:latest
      - echo Build completed on `date`
      - echo pushing to repo
      - docker push $REPOSITORY_URI:$IMAGE_TAG
     #- docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      # Give your container name
      - DOCKER_CONTAINER_NAME=spring-boot-application
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
    - target/spring-boot-web-0.0.1.jar
